class Node{
	public:
		int data;
		Node* next;
		
		Node(int data) {
			this-> data = data;
			next = nullptr;
		}
};

class SinglyLinkedList{
	public:
		void InsertAtHead(Node* &head, int data) {
			Node* temp = new Node(data);
			temp -> next = head;
			head = temp;
		}
		
		void InsertAtTail(Node* &head, int data) {
		    if (head == nullptr) {  
		        InsertAtHead(head, data);
		        return;
		    }
		    Node* current = head;
		    while (current->next != nullptr) {
		        current = current->next;
		    }
		    Node* temp = new Node(data);
		    current->next = temp;
		}
		
		void InsertAtRandom(Node* &head, int position, int data) {
		    if (position < 1) {
		        cout << "Invalid position!" << endl;
		        return;
		    }
		    if (position == 1) {
		        InsertAtHead(head, data);
		        return;
		    }
		    Node* current = head;
		    int count = 1;
		    while (count < position - 1 && current != nullptr) {
		        current = current->next;
		        count++;
		    }
		    if (current == nullptr) {
		        cout << "Position out of bounds!" << endl;
		        return;
		    }
		    Node* temp = new Node(data);
		    temp->next = current->next;
		    current->next = temp;
		}
		
		void Traverse(Node* head) {
			if (head == nullptr) {
				cout << "List is Empty" << endl;
				return;
			}
			Node* temp = head;
			while (temp != nullptr) {
				cout << temp -> data << " ";
				temp = temp -> next;
			} cout << endl;
		}
		
		void DeleteNode(Node* &head, int position) {
		    if (head == nullptr) {
		        cout << "List is already empty!" << endl;
		        return;
		    }
		    if (position == 1) { 
		        Node* temp = head;
		        head = head->next;
		        delete temp;
		        return;
		    }
		    Node* current = head;
		    Node* previous = nullptr;
		    int count = 1;
		    while (count < position && current != nullptr) {
		        previous = current;
		        current = current->next;
		        count++;
		    }
		    if (current == nullptr) {
		        cout << "Position out of bounds!" << endl;
		        return;
		    }
		    previous->next = current->next;
		    delete current;
		}
};
